/**
* Proyecto Cierzo API
* Back-end API del Proyecto Cierzo
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.client.apis

import io.swagger.client.models.AlbumItem

import io.swagger.client.infrastructure.*

class AdminApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/miguescri/ProySoft/1.0.0") : ApiClient(basePath) {

    /**
    * a침ade una canci칩n a un album
    * Un admin a침ade una canci칩n a un album
    * @param albumID ID del album 
    * @param songID Song to add (optional)
    * @return AlbumItem
    */
    @Suppress("UNCHECKED_CAST")
    fun addAlbumSong(albumID: kotlin.String, songID: kotlin.String) : AlbumItem {
        val localVariableBody: kotlin.Any? = songID
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/albums/{albumID}/songs".replace("{"+"albumID"+"}", "$albumID"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<AlbumItem>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as AlbumItem
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
