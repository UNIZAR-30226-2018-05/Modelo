/**
 * Proyecto Cierzo API
 * Back-end API del Proyecto Cierzo
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlbumItem from '../model/AlbumItem';
import AlbumItemNew from '../model/AlbumItemNew';
import SongItem from '../model/SongItem';
import SongItemNew from '../model/SongItemNew';

/**
* Admins service.
* @module api/AdminsApi
* @version 1.0.0
*/
export default class AdminsApi {

    /**
    * Constructs a new AdminsApi. 
    * @alias module:api/AdminsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAlbum operation.
     * @callback module:api/AdminsApi~addAlbumCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlbumItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * crea una lista de reproducción
     * Un usuario crea una lista de reproducción.
     * @param {Object} opts Optional parameters
     * @param {module:model/AlbumItemNew} opts.albumItem Playlist item to add
     * @param {module:api/AdminsApi~addAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlbumItem}
     */
    addAlbum(opts, callback) {
      opts = opts || {};
      let postBody = opts['albumItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AlbumItem;

      return this.apiClient.callApi(
        '/albums', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addSong operation.
     * @callback module:api/AdminsApi~addSongCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * añade una canción
     * Un admin añade una canción a la base de datos.
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItemNew} opts.songItem Song item to add
     * @param {module:api/AdminsApi~addSongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongItem}
     */
    addSong(opts, callback) {
      opts = opts || {};
      let postBody = opts['songItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SongItem;

      return this.apiClient.callApi(
        '/songs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlbum operation.
     * @callback module:api/AdminsApi~deleteAlbumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * elimina un album
     * Elimina la playlist identificada por playlistID 
     * @param {String} albumID ID de la playlist
     * @param {module:api/AdminsApi~deleteAlbumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlbum(albumID, callback) {
      let postBody = null;

      // verify the required parameter 'albumID' is set
      if (albumID === undefined || albumID === null) {
        throw new Error("Missing the required parameter 'albumID' when calling deleteAlbum");
      }


      let pathParams = {
        'albumID': albumID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/albums/{albumID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAlbumImage operation.
     * @callback module:api/AdminsApi~deleteAlbumImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * elimina el archivo de audio de una canción
     * Elimina el fichero de audio de una canción identificada por songID 
     * @param {String} albumID ID de la canción
     * @param {module:api/AdminsApi~deleteAlbumImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAlbumImage(albumID, callback) {
      let postBody = null;

      // verify the required parameter 'albumID' is set
      if (albumID === undefined || albumID === null) {
        throw new Error("Missing the required parameter 'albumID' when calling deleteAlbumImage");
      }


      let pathParams = {
        'albumID': albumID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/albums/{albumID}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSong operation.
     * @callback module:api/AdminsApi~deleteSongCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * elimina una canción
     * Elimina información y fichero de  la canción identificada por songID 
     * @param {String} songID ID de la canción
     * @param {module:api/AdminsApi~deleteSongCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSong(songID, callback) {
      let postBody = null;

      // verify the required parameter 'songID' is set
      if (songID === undefined || songID === null) {
        throw new Error("Missing the required parameter 'songID' when calling deleteSong");
      }


      let pathParams = {
        'songID': songID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/songs/{songID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSongFile operation.
     * @callback module:api/AdminsApi~deleteSongFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * elimina el archivo de audio de una canción
     * Elimina el fichero de audio de una canción identificada por songID 
     * @param {String} songID ID de la canción
     * @param {module:api/AdminsApi~deleteSongFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSongFile(songID, callback) {
      let postBody = null;

      // verify the required parameter 'songID' is set
      if (songID === undefined || songID === null) {
        throw new Error("Missing the required parameter 'songID' when calling deleteSongFile");
      }


      let pathParams = {
        'songID': songID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/songs/{songID}/file', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSongImage operation.
     * @callback module:api/AdminsApi~deleteSongImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * elimina el archivo de audio de una canción
     * Elimina el fichero de audio de una canción identificada por songID 
     * @param {String} songID ID de la canción
     * @param {module:api/AdminsApi~deleteSongImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSongImage(songID, callback) {
      let postBody = null;

      // verify the required parameter 'songID' is set
      if (songID === undefined || songID === null) {
        throw new Error("Missing the required parameter 'songID' when calling deleteSongImage");
      }


      let pathParams = {
        'songID': songID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/songs/{songID}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSong operation.
     * @callback module:api/AdminsApi~updateSongCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SongItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * actualiza la información de una canción
     * Un admin actualiza la información de una canción.
     * @param {String} songID ID de la canción
     * @param {Object} opts Optional parameters
     * @param {module:model/SongItemNew} opts.songItem Song item to update
     * @param {module:api/AdminsApi~updateSongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SongItem}
     */
    updateSong(songID, opts, callback) {
      opts = opts || {};
      let postBody = opts['songItem'];

      // verify the required parameter 'songID' is set
      if (songID === undefined || songID === null) {
        throw new Error("Missing the required parameter 'songID' when calling updateSong");
      }


      let pathParams = {
        'songID': songID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SongItem;

      return this.apiClient.callApi(
        '/songs/{songID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAlbumImage operation.
     * @callback module:api/AdminsApi~uploadAlbumImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * carga el archivo de audio de una canción
     * Un admin carga el archivo de audio de una canción con identificador songID.
     * @param {String} albumID ID de la canción
     * @param {File} albumImage Song item to update
     * @param {module:api/AdminsApi~uploadAlbumImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadAlbumImage(albumID, albumImage, callback) {
      let postBody = null;

      // verify the required parameter 'albumID' is set
      if (albumID === undefined || albumID === null) {
        throw new Error("Missing the required parameter 'albumID' when calling uploadAlbumImage");
      }

      // verify the required parameter 'albumImage' is set
      if (albumImage === undefined || albumImage === null) {
        throw new Error("Missing the required parameter 'albumImage' when calling uploadAlbumImage");
      }


      let pathParams = {
        'albumID': albumID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'albumImage': albumImage
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/albums/{albumID}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadSongFile operation.
     * @callback module:api/AdminsApi~uploadSongFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * carga el archivo de audio de una canción
     * Un admin carga el archivo de audio de una canción con identificador songID.
     * @param {String} songID ID de la canción
     * @param {File} songFile Song item to update
     * @param {module:api/AdminsApi~uploadSongFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadSongFile(songID, songFile, callback) {
      let postBody = null;

      // verify the required parameter 'songID' is set
      if (songID === undefined || songID === null) {
        throw new Error("Missing the required parameter 'songID' when calling uploadSongFile");
      }

      // verify the required parameter 'songFile' is set
      if (songFile === undefined || songFile === null) {
        throw new Error("Missing the required parameter 'songFile' when calling uploadSongFile");
      }


      let pathParams = {
        'songID': songID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'songFile': songFile
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/songs/{songID}/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadSongImage operation.
     * @callback module:api/AdminsApi~uploadSongImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * carga el archivo de audio de una canción
     * Un admin carga el archivo de audio de una canción con identificador songID.
     * @param {String} songID ID de la canción
     * @param {File} songImage Song item to update
     * @param {module:api/AdminsApi~uploadSongImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    uploadSongImage(songID, songImage, callback) {
      let postBody = null;

      // verify the required parameter 'songID' is set
      if (songID === undefined || songID === null) {
        throw new Error("Missing the required parameter 'songID' when calling uploadSongImage");
      }

      // verify the required parameter 'songImage' is set
      if (songImage === undefined || songImage === null) {
        throw new Error("Missing the required parameter 'songImage' when calling uploadSongImage");
      }


      let pathParams = {
        'songID': songID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'songImage': songImage
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/songs/{songID}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
