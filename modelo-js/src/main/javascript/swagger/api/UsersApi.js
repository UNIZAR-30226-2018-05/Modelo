/**
 * Proyecto Cierzo API
 * Back-end API del Proyecto Cierzo
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountItem from '../model/AccountItem';
import AccountItemUpdate from '../model/AccountItemUpdate';
import LoginItem from '../model/LoginItem';
import PlaylistItem from '../model/PlaylistItem';
import PlaylistItemNew from '../model/PlaylistItemNew';
import SessionItem from '../model/SessionItem';


/**
* Users service.
* @module api/UsersApi
* @version 1.0.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPlaylist operation.
     * @callback module:api/UsersApi~addPlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * crea una lista de reproducción
     * Un usuario crea una lista de reproducción.
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaylistItemNew} opts.playlistItem Playlist item to add
     * @param {module:api/UsersApi~addPlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistItem}
     */
    addPlaylist(opts, callback) {
      opts = opts || {};
      let postBody = opts['playlistItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaylistItem;

      return this.apiClient.callApi(
        '/playlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the addPlaylistSong operation.
     * @callback module:api/UsersApi~addPlaylistSongCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * añade una canción a una lista de reproducción
     * Un usuario añade una canción a una lista de reproducción de su propiedad.
     * @param {String} playlistID ID de la playlist
     * @param {Object} opts Optional parameters
     * @param {String} opts.songID Song to add
     * @param {module:api/UsersApi~addPlaylistSongCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistItem}
     */
    addPlaylistSong(playlistID, opts, callback) {
      opts = opts || {};
      let postBody = opts['songID'];

      // verify the required parameter 'playlistID' is set
      if (playlistID === undefined || playlistID === null) {
        throw new Error("Missing the required parameter 'playlistID' when calling addPlaylistSong");
      }


      let pathParams = {
        'playlistID': playlistID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaylistItem;

      return this.apiClient.callApi(
        '/playlists{playlistID}/songs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/UsersApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * borra la cuenta del usuario
     * Elimina definitivamente la cuenta del usuario. No se puede deshacer. No funciona con cuentas de administrador 
     * @param {module:api/UsersApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/account', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlaylist operation.
     * @callback module:api/UsersApi~deletePlaylistCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * elimina una playlist
     * Elimina la playlist identificada por playlistID 
     * @param {String} playlistID ID de la playlist
     * @param {module:api/UsersApi~deletePlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePlaylist(playlistID, callback) {
      let postBody = null;

      // verify the required parameter 'playlistID' is set
      if (playlistID === undefined || playlistID === null) {
        throw new Error("Missing the required parameter 'playlistID' when calling deletePlaylist");
      }


      let pathParams = {
        'playlistID': playlistID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/playlists/{playlistID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlaylistSong operation.
     * @callback module:api/UsersApi~deletePlaylistSongCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * elimina una canción de una playlist identificada por playlistID
     * Elimina una canción de la playlist identificada por playlistID 
     * @param {String} playlistID ID de la playlist
     * @param {String} songID ID de la canción
     * @param {module:api/UsersApi~deletePlaylistSongCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePlaylistSong(playlistID, songID, callback) {
      let postBody = null;

      // verify the required parameter 'playlistID' is set
      if (playlistID === undefined || playlistID === null) {
        throw new Error("Missing the required parameter 'playlistID' when calling deletePlaylistSong");
      }

      // verify the required parameter 'songID' is set
      if (songID === undefined || songID === null) {
        throw new Error("Missing the required parameter 'songID' when calling deletePlaylistSong");
      }


      let pathParams = {
        'playlistID': playlistID,
        'songID': songID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/playlists/{playlistID}/songs/{songID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the followProfile operation.
     * @callback module:api/UsersApi~followProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * comienza a seguir al usuario identificado por profileID
     * Comienza a seguir al usuario identificado por profileID
     * @param {String} profileID ID del perfil
     * @param {module:api/UsersApi~followProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    followProfile(profileID, callback) {
      let postBody = null;

      // verify the required parameter 'profileID' is set
      if (profileID === undefined || profileID === null) {
        throw new Error("Missing the required parameter 'profileID' when calling followProfile");
      }


      let pathParams = {
        'profileID': profileID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/profiles/{profileID}/follow', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/UsersApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * devuelve la información de la cuenta del usuario
     * Devuelve la información de la cuenta del usuario 
     * @param {module:api/UsersApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountItem}
     */
    getAccount(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccountItem;

      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/UsersApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cierra sesión de usuario
     * Cierra la sesión de usuario
     * @param {module:api/UsersApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/login', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreSession operation.
     * @callback module:api/UsersApi~restoreSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * devuelve información de sincronización de canciones
     * Devuelve la lista de reproducción, la canción y el segundo que estaba escuchando el usuario previamente 
     * @param {module:api/UsersApi~restoreSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionItem}
     */
    restoreSession(callback) {
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionItem;

      return this.apiClient.callApi(
        '/account/session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSession operation.
     * @callback module:api/UsersApi~saveSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * guarda información de sincronización de canciones
     * Guarda la lista de reproducción, la canción y el segundo que está escuchando el usuario
     * @param {Object} opts Optional parameters
     * @param {module:model/SessionItem} opts.sessionItem Datos a sincronizar
     * @param {module:api/UsersApi~saveSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountItem}
     */
    saveSession(opts, callback) {
      opts = opts || {};
      let postBody = opts['sessionItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountItem;

      return this.apiClient.callApi(
        '/account/session', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unfollowProfile operation.
     * @callback module:api/UsersApi~unfollowProfileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deja de seguir al usuario identificado por profileID
     * Deja de seguir al usuario identificado por profileID 
     * @param {String} profileID ID del perfil
     * @param {module:api/UsersApi~unfollowProfileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unfollowProfile(profileID, callback) {
      let postBody = null;

      // verify the required parameter 'profileID' is set
      if (profileID === undefined || profileID === null) {
        throw new Error("Missing the required parameter 'profileID' when calling unfollowProfile");
      }


      let pathParams = {
        'profileID': profileID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/profiles/{profileID}/follow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/UsersApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * actualiza información de cuenta de usuario
     * Actualiza la información de la cuenta del usuario
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountItemUpdate} opts.accountItem Datos a actualizar
     * @param {module:api/UsersApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountItem}
     */
    updateAccount(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountItem;

      return this.apiClient.callApi(
        '/account', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountCredentials operation.
     * @callback module:api/UsersApi~updateAccountCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccountItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * modifica credenciales de acceso de cuenta de usuario
     * Modifica las credenciales de acceso de la cuenta del usuario
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginItem} opts.loginItem Datos a actualizar
     * @param {module:api/UsersApi~updateAccountCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccountItem}
     */
    updateAccountCredentials(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginItem'];


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AccountItem;

      return this.apiClient.callApi(
        '/account/credentials', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePlaylist operation.
     * @callback module:api/UsersApi~updatePlaylistCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaylistItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * actualiza la información de una playlist
     * Un usuario actualiza la información de una playlist de su propiedad.
     * @param {String} playlistID ID de la playlist
     * @param {Object} opts Optional parameters
     * @param {module:model/PlaylistItemNew} opts.playlistItem Playlist item to update
     * @param {module:api/UsersApi~updatePlaylistCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaylistItem}
     */
    updatePlaylist(playlistID, opts, callback) {
      opts = opts || {};
      let postBody = opts['playlistItem'];

      // verify the required parameter 'playlistID' is set
      if (playlistID === undefined || playlistID === null) {
        throw new Error("Missing the required parameter 'playlistID' when calling updatePlaylist");
      }


      let pathParams = {
        'playlistID': playlistID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaylistItem;

      return this.apiClient.callApi(
        '/playlists/{playlistID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }


}
